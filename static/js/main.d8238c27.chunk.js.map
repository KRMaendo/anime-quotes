{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","React","useState","open","setOpen","className","quote","Button","variant","color","onClick","Dialog","onClose","DialogTitle","id","character","Chip","size","label","anime","DialogContent","DialogContentText","CardList","quotes","map","index","App","fetchAnime","fetch","then","response","json","setState","categories","fetchQuotes","category","toLowerCase","includes","handleFilterChage","e","target","value","handleChange","searchField","state","this","filteredquote","filter","toLocaleLowerCase","createTheme","spacing","NativeSelect","onChange","Input","startAdornment","InputAdornment","position","SearchRounded","type","classes","inputTypeSearch","placeholder","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8238c27.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nimport { Dialog } from '@material-ui/core';\r\nimport { DialogContent } from '@material-ui/core';\r\nimport { DialogContentText } from '@material-ui/core';\r\nimport { DialogTitle } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { Chip } from '@material-ui/core';\r\n\r\n\r\nexport const Card = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    return (\r\n        <div className='card-container'>\r\n            <p>{props.quote.quote}</p>\r\n            <Button variant='outlined' color='#0ccac4' onClick={handleClickOpen}>\r\n                View Answer\r\n            </Button>\r\n            <Dialog \r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n            >\r\n                <DialogTitle id='alert-dialog-title'>\r\n                    { props.quote.character}\r\n                    <Chip className='ml-1' variant='outlined' size='small' label={ `Anime: ${props.quote.anime}`} /> \r\n                    </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id='alert-dialog-description'>\r\n                        {props.quote.quote}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n        );\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    return <div className='card-list'>{ props.quotes.map((quote, index) => <Card key={index} quote={quote}/>) }</div>;\r\n};","import { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport Input from '@material-ui/core/Input';\nimport { InputAdornment } from '@material-ui/core';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { classes } from 'istanbul-lib-coverage';\nimport { createTheme } from '@material-ui/core/styles';\nimport { SearchRounded } from '@material-ui/icons';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      quotes: [],\n      searchField: '',\n      categories: []\n    }\n  }\n\n  componentDidMount(){\n    this.fetchQuotes();\n    this.fetchAnime();\n  }\n\n  fetchAnime = ()=> {\n    fetch('https://animechan.vercel.app/api/available/anime')\n    .then(response => response.json())\n    .then(anime => this.setState({ categories: anime}));\n  }\n\n  fetchQuotes = category => {\n    if(!category || category.toLowerCase().includes('random')){\n      fetch('https://animechan.vercel.app/api/quotes')\n      .then(response => response.json())\n      .then(quote => this.setState({quotes: quote}));\n    } else {\n      fetch(`https://animechan.vercel.app/api/quotes/anime?title=${category}`)\n      .then(response => response.json())\n      .then(quote => this.setState({quotes: quote}));\n    }\n  }\n\n  handleFilterChage = e => {\n    this.fetchQuotes(e.target.value)\n  }\n\n  handleChange = e => {\n    this.setState({ searchField : e.target.value })\n  }\n\n  render(){\n    const { quotes, searchField } = this.state;\n    const filteredquote = quotes.filter(quote => quote.character.toLowerCase().includes(searchField.toLocaleLowerCase()));\n    const theme = createTheme();\n    theme.spacing(2);\n\n    return (\n      <div className=\"App\">\n        <div \n        className='container'\n        >\n          <header>\n            <h1>Anime Quotes</h1>\n            <p>Try and guess who the quote is from and hover over the quote to see if you were correct. Have fun!!!</p>\n              <div\n                className='m-2 filter-section' \n              >\n                <NativeSelect\n                className='m-2'\n                  onChange={ this.handleFilterChage }\n                >\n                  <option value='random'>\n                    Select an anime category\n                  </option>\n                  { this.state.categories.map(category => <option value={ category }>{ category }</option>) }\n                </NativeSelect>\n                <Input\n                startAdornment={\n                  <InputAdornment position='start'>\n                    <SearchRounded />\n                  </InputAdornment>\n                }\n                type='search'\n                className={ `${ classes.inputTypeSearch } m-2` }\n                placeholder='Search Quotes'\n                onChange = { this.handleChange }\n                inputTypeSearch\n              />\n              </div>\n          </header>\n        <CardList quotes={ filteredquote } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}